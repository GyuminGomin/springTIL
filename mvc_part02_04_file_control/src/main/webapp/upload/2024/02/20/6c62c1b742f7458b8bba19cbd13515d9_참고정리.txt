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


git pull origin [branchname] --allow-unrelated-histories (pull 명령어에 옵션을 추가해 강제로 pull 하는 방법)
또는 git clone 명령어를 통해 원격 저장소를 로컬 저장소로 가져오기를 사용한 후에, git push ~사용

--------------------------------깃허브에 파일 올리는 순서------------------------------
git config --global user.name [user_name]
git config --global user.email [user_email]
( git 파일 생성 -로컬저장소 생성- )
git init
( 초기에 로컬 저장소에 있는 데이터를 깃에 있는 원격 저장소와 연동하기 위해 )
git remote add origin( 아무거나 해도 됨 ) [원격저장소 주소]
( 만약에 원격 저장소에 readme같은 파일을 생성해 놓았다면, 2가지 방법으로 로컬저장소에 연동 해야함 why? --> 로컬저장소에 원격저장소의 파일과 달라 깨지는 현상이 발생가능해서 알아서 막기 때문 )
git clone [원격저장소 주소] 또는 git pull origin [branchname] --allow-unrelated-histories (pull 명령어에 옵션을 추가해 강제로 pull 하는 방법)
( 마지막으로 원격저장소에 파일을 올리기 위해 add, commit push 순으로 저장 )
git add . ( .은 모든 파일 or *)
git commit -m [메세지 작성]
git push -u origin( 위에 리모트 한 이름과 같아야 함 ) [branchname] ( -u를 통해 한번 지정을 하면, 다음부터는 브랜치명 지정을 생략할 수도 있다!, 단 비어있는 원격 저장소에 push 했을 때는 원격 저장소명과 브랜치명을 생략할 수 없다. )
이 과정을 한번 했다면, 이제 파일 올리기는 add, commit, push만 해도 됨
-----------------------------------------------------------------------------------------


----------------------------------git fetch와 git pull-----------------------------------
fetch는 원격저장소에 있는 내용을 가져오지만 자동으로 내 로컬저장소에 merge하진 않는다. 원격 저장소의 내용을
확인만 하고 로컬에 merge하고 싶지 않을 때는 fetch를 사용한다.
HEAD에는 가장 마지막에 행해진 commit정보가 담긴다. 마찬가지로 FETCH_HEAD는 원격저장소의 가장 최신 commit
이력이 담기게 된다. FETCH_HEAD는 이름 없는 브랜치로 로컬에 가져오게 된다. 이 브랜치는 FETCH_HEAD로,
checkout도 가능

pull 명령어는 원격 저장소에 있는 내용을 가져올 뿐 아니라, 자동으로 로컬 저장소에 merge한다.
즉 git pull 명령어는 git fetch + git merge FETCH_HEAD인 셈이다.

> git fetch
(git pull과 다르게 지역저장소에 가져오지 않고, FETCH_HEAD라는 가상공간에 저장)
> git checkout FETCH_HEAD
(fetch한 자료들을 확인할 수 있다.)
> git merge FETCH_HEAD
> git pull origin master
(fetch한 자료를 merge하거나 그냥 아예싸그리 pull해오면 됨)
-----------------------------------------------------------------------------------------


----------------------git add . 잘못한 파일을 리셋 시키는 법--------------------------
git reset HEAD [파일명]
----------git commit 취소하기
 cf.) git log --> commit 목록을 확인
git reset --soft HEAD^ --> commit을 취소하고 해당 파일들은 staged 상태로 워킹 디렉터리에 보존
git reset --mixed HEAD^ --> commit을 취소하고 해당 파일들은 unstaged 상태로 워킹 디렉터리에 보존
git reset HEAD^ , git reset HEAD~2 위와 동일
git reset --hard HEAD^ --> commit을 취소하고 해당 파일들은 unstaged 상태로 워킹 디렉터리에서 삭제
git reset --hard HEAD --> 워킹 디렉터리를 원격 저장소의 마지막 commit 상태로 되돌린다.
----------reset 옵션
–soft : index 보존(add한 상태, staged 상태), 워킹 디렉터리의 파일 보존. 즉 모두 보존.
–mixed : index 취소(add하기 전 상태, unstaged 상태), 워킹 디렉터리의 파일 보존 (기본 옵션)
–hard : index 취소(add하기 전 상태, unstaged 상태), 워킹 디렉터리의 파일 삭제. 즉 모두 취소.
https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html
----------commit message 변경
git commit --amend
-----------------------------------------------------------------------------------------


--------------------.gitignore에 원하지 않는 파일 무시하는 법-------------------------
# 특정 파일 fileName 제외하기
fileName.js
# 현재 경로에 있는 fileName_1 만 제외학. (다른경로 fileName_1말고)
/fileName.js
# 특정 폴더 node_module 안의 파일 다 제외하기
node_module/
# 특정 경로의 특정 파일 제외하기
folder/my.txt
# 특정 경로 아래의 모든 fileName_2 제외하기
folder/**/fileName_2.txt
# 특정 확장자 파일 다 제외하기
*.txt
# 예외 만들기
!fileName.txt
----------------------------------------------------------------------------------------


---------------------------------깃헙 협업하는 방법-----------------------------------
fork 방식
git config --global user.name [user_name]
git config --global user.email [user_email]
( git 파일 생성 -로컬저장소 생성- )
git init
( 초기에 로컬 저장소에 있는 데이터를 깃에 있는 원격 저장소와 연동하기 위해 )
git remote add origin( 아무거나 해도 됨 ) [원격저장소 주소]
( 만약에 원격 저장소에 readme같은 파일을 생성해 놓았다면, 2가지 방법으로 로컬저장소에 연동 해야함 why? --> 로컬저장소에 원격저장소의 파일과 달라 깨지는 현상이 발생가능해서 알아서 막기 때문 )
git clone [원격저장소 주소] 또는 git pull origin [branchname] --allow-unrelated-histories (pull 명령어에 옵션을 추가해 강제로 pull 하는 방법)
( 마지막으로 원격저장소에 파일을 올리기 위해 add, commit push 순으로 저장 )
> git branch [branch_name]
(branch 생성)
> git checkout [wanting branch_name]
(branch 옮기기)
> git remote add [처음 생성한 origin과는 다른 것] [나의 원격저장소 주소]
(협업할 때, 다른 branch를 생성하고, 그 브랜치를 내 깃허브에 넣어주기 위해)
> git push -u [처음 생성한 origin과는 다른 것] [wanting branch_name]
(내 깃헙에 파일 올리기 끝!)
- 그리고 작업이 끝나면, 이 로컬 원격 저장소 branch에 파일을 올리고
> git checkout master
(branch master로 옮기기)
> git merge [wanting branch_name]
(작업 했던 branch를 master로 병합하기
> git push origin master
(참고로 작업은 충돌이 안나도록 분할해서 작업을 하도록 하길!)

cf. 현재 branch 확인 :
> git branch -r
(원격 브랜치 목록 조회)
> git branch -a
(모든 브랜치 목록 조회)
> git branch
(로컬 브랜치 목록 조회)
> git branch -M
(로컬 브랜치 master 네임 변경) (master slave라는 용어를 많이 사용했는데, 노예라는 단어를 쓰지말자는 취지에서 master 또한 main으로 변경하게 됨)
> git switch [branch_name]
(브랜치 변경)
> git switch -c [branch_name]
(브랜치 생성하면서 변경)
> git branch -d [branch_name]
(브랜치 삭제)
> git branch [생성할 브랜치 이름] [기준이 될 브랜치]
(임시 브랜치 생성)
----------------------------------------------------------------------------------------


---------------------------------깃헙 충돌 났을 경우-----------------------------------
branch에서만 작업해서 충돌난 것을 미리 확인하였을 경우 reset,revert 둘 다 사용 가능
but, master에서도 push를 해 깃헙에 올라간 상태라면, revert 명령어만 사용 가능

깃헙 주소의 Your recently pushed branches: 상태창의 Compare & pull resquest버튼
누르면, commit 이력을 확인 가능, 제일 오른쪽에 ex. f37a6b7 같은 것이 존재하는데
그곳으로 돌아가고 싶다면,
> git revert commit [commit_id]
(커밋리스트에 안전하다고 생각 되는 부분으로 다시 되돌리기)
----------------------------------------------------------------------------------------
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


수업에서 배운 것
git add . -> staging
git commit -> 내가 생각하기론 여기까진 local 저장소에 저장하는 단계
git push -> 내가 생각하기론 여기부터 분산관리 툴인 깃(원격) 저장소에 저장하는 단계
git log -> 커밋을 했던 기록들이 나옴
git checkout [commit_id] -> 커밋했던 위치를 변경할 수 있음
git checkout main -> 브런치 변경 
git pull [원격저장소 이름] [원격저장소 브랜치]-> 원격저장소에서 로컬저장소로 땡겨오기
git config --global --unset -> 전역 옵션 삭제
git config --local --unset -> 지역 옵션 삭제
git config --list -> 현재 프로젝트의 모든 옵션 확인
- 지역 옵션이 전역 옵션을 우선함 (local을 통해서 프로젝트 별 다른 옵션 설정 가능

git commit --amend
- 마지막 커밋 수정하기

git cherry-pick
- 원하는 커밋 상태 현재 브랜치로 가져오기

# 깃 코어 에디터 변경
git config --global core.editor "\"C:\Users\admin\AppData\Local\Programs\Microsoft VS Code\Code.exe\" --wait"
# 깃 색깔 추가
git config --global color.ui auto -> beam 메시지 설정
# git log ( git log : 자세한 기록을 보고 싶을 때 (HEAD 관련된 커밋만) )
git log --oneline : 간단한 커밋해시와 제목만 보고 싶을 때
git log --oneline --graph --decorate : 커밋 그래프 보고 싶을 때
git log --oneline --graph --decorate --all : 모든 브랜치를 보고 싶을 때 - 자주 쓰이는 명령어
git log --oneline -n<보고싶은 최신 커밋의 수>
# git 명령어 축약하기
git config --global alias.<축약해서 실행할 명령> "<축약할 명령어>"

# 브랜치 되돌리기
git reset --hard <이동할 커밋>
커밋 해시코드를 타이핑하는 대신 HEAD 기준으로 옮길 수 있다.
HEAD~[숫자] : HEAD로부터 숫자(n)번만큼 떨어진 커밋으로
# Fast Forward 상황에서 rebase
빨리감기 일 땐 merge명령어처럼 동작
# `git rebase [branch_name]` 현재 기준 브랜치, 빨리감기 대상 브랜치

# 태그 달기(릴리즈)
> git tag -am ["주석"] [태그이름]
# 태그 푸시 : 태그는 별도로 원격저장소 푸시해야 함.
> git push [원격저장소 이름] [태그이름]

> git clean -f -d
- untracked 추적이 안된 (스테이징이 한번도 되지 않은) 파일들을 없애고 싶을 때. 사용 (-d옵션은 폴더, -f는 파일)
> git reflog
(git log로 찾을 수 없는 커밋을 되살리기 위해서 로컬 저장소에서 작업한 모든 이력을 확인하는 명령어)
> git reset --hard HEAD@{[reflog에서 확인한 숫자]}
(하드 리셋을 통해 되살려낼 수 있다.) - 유효 범위 : 로컬 저장소

# 3-way Merge
1. 오류가 없는 버전에서 브랜치 생성
2. 개발 브랜치, hotfix 브랜치
3. 소스 코드를 수정하고 테스트 완료
4. 빨리감기 병합 후 배포
5. 개발 브랜치 병합 (충돌이 발생할 확률이 있다.)

*   5 : 3way merge 발생
|  |
* *  2 <- HEAD (hotfix, main) 3, 4
| /
*   1

- Conflict
  - 양쪽 브랜치가 같은 내용을 수정했다면, 소스코드를 수동으로 수정
  - 수정한 파일을 스테이징 (add)
  - commit (병합 커밋 메시지 자동생성)

# 3-way Rebase
1. git rebase [대상브랜치]
2. 충돌이 발생할 경우
3. 수동으로 파일 수정하고 저장
4. 스테이징 git add [파일]
5. git rebase --continue

# 3 way 병합
1. 병합 커밋을 생성
2. 한번만 충돌 발생
3. 트리가 지저분하게 남는다.
# 3 way rebase
1. 현재 커밋을 수정하고, 대상 브랜치 위에 재배치함.
2. 깔끔한 한 줄 커밋 히스토리
3. 충돌이 여러번 발생할 수 있다. (rebase --continue)

소스트리란? Atlassian이 개발한 무료 Git 클라이언트로 GitHub Desktop과 비교했을 때 SourceTree는 고도로 발전했으며,
UI에서 사용할 수 있는 많은 기능과 작업이 제공됩니다. (Windows 및 Mac에선 지원하지만, Linux는 아직 지원하지 않습니다.)

fast-forward(빨리 감기) 병합 -> main 변화 없이 커밋만 옮겨가는 것

upstream -> fork를 받은 원격저장소의 이름을 upstream이라고 함(일반적으로)

git config credential.helper -> 자격증명관리 실행하고 search창에서 자격증명관리 검색한 후, Windows 자격증명에
github 일반자격증명 제거하거나 수정하면 됨

https://github.com/progit/progit2-ko/releases/download/2.1.80/progit.pdf -> 깊게 git 파고 싶으면,,,